name: Deploy Package

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Test before Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Set up JDK 11.x
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Remove snapshot
      run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
    - name: Build with Maven
      run: mvn -B package --file pom.xml "-Dproject.build.id=.${{ github.run_number }}"

  release-ghr:
    name: Upload files to ${{ github.ref }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up JDK 11.x
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Remove snapshot
        run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: ./README.md
      # - name: Upload artifact
      #   id: upload-release-asset-less
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: /target/sonar-vcsparser-plugin*.jar
      #     asset_name: sonar-vcsparser-plugin.jar
      #     asset_content_type: application/java-archive
      - name: Upload artifact
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_url = '${{ steps.create_release.outputs.upload_url }}';
            const contentLength = filePath => fs.statSync(filePath).size;
            for (let file of await fs.readdirSync('./target')) {
              if (path.extname(file) === '.jar') {
                console.log('uploadReleaseAsset', file);
                const headers = { 'content-type': 'application/java-archive', 'content-length': contentLength(`./target/${file}`) };
                await github.repos.uploadReleaseAsset({
                  url: release_url,
                  headers,
                  name: file,
                  file: fs.readFileSync(`./target/${file}`)
                });
              }
            }

  publish-gpr:
    name: Publish to Github Package Registry
    needs: release-ghr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up JDK 11.x
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Remove snapshot
        run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
      - name: Publish package
        run: mvn -B deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
